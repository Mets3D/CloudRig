import bpy
from bpy.props import *
from mathutils import *

from rigify.base_rig import stage

from ..definitions.driver import *
from .cloud_fk_chain import CloudFKChainRig

class CloudShoulderRig(CloudFKChainRig):
	"""Cloud shoulder rig. (Currently very simple)"""

	def find_org_bones(self, bone):
		"""Populate self.bones.org."""
		from rigify.utils.bones import BoneDict
		# We just want the base bone.
		return BoneDict(
			main=[bone.name],
		)

	def initialize(self):
		super().initialize()
		"""Gather and validate data about the rig."""

	@stage.prepare_bones
	def prepare_fk_shoulder(self):
		self.fk_chain[0].custom_shape = self.load_widget("Clavicle")
		self.fk_chain[0].bone_group = 'Body: Main IK Controls'
		self.register_parent(self.fk_chain[0], self.side_prefix.capitalize() + " Shoulder")

		parent = self.get_bone(self.base_bone).parent
		if parent:
			self.fk_chain[0].parent = parent.name

	##############################
	# Parameters

	@classmethod
	def add_parameters(cls, params):
		""" Add the parameters of this rig type to the
			RigifyParameters PropertyGroup
		"""
		super().add_parameters(params)

	@classmethod
	def parameters_ui(cls, layout, params):
		""" Create the ui for the rig parameters.
		"""
		super().parameters_ui(layout, params)

class Rig(CloudShoulderRig):
	pass

def create_sample(obj):
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('Shoulder.L')
    bone.head = 0.0231, -0.0234, 1.2487
    bone.tail = 0.1131, 0.0042, 1.2508
    bone.roll = -0.0235
    bone.use_connect = False
    bone.bbone_x = 0.0113
    bone.bbone_z = 0.0113
    bone.head_radius = 0.0111
    bone.tail_radius = 0.0133
    bone.envelope_distance = 0.0778
    bone.envelope_weight = 1.0000
    bone.use_envelope_multiply = 0.0000
    bones['Shoulder.L'] = bone.name
    bone = arm.edit_bones.new('UpperArm.L')
    bone.head = 0.1131, 0.0042, 1.2508
    bone.tail = 0.3176, 0.0138, 1.2407
    bone.roll = -1.5214
    bone.use_connect = True
    bone.bbone_x = 0.0121
    bone.bbone_z = 0.0121
    bone.head_radius = 0.0133
    bone.tail_radius = 0.0112
    bone.envelope_distance = 0.0448
    bone.envelope_weight = 1.0000
    bone.use_envelope_multiply = 0.0000
    bone.parent = arm.edit_bones[bones['Shoulder.L']]
    bones['UpperArm.L'] = bone.name
    bone = arm.edit_bones.new('Forearm.L')
    bone.head = 0.3176, 0.0138, 1.2407
    bone.tail = 0.5288, -0.0125, 1.2312
    bone.roll = -1.5260
    bone.use_connect = True
    bone.bbone_x = 0.0107
    bone.bbone_z = 0.0107
    bone.head_radius = 0.0112
    bone.tail_radius = 0.0132
    bone.envelope_distance = 0.0526
    bone.envelope_weight = 1.0000
    bone.use_envelope_multiply = 0.0000
    bone.parent = arm.edit_bones[bones['UpperArm.L']]
    bones['Forearm.L'] = bone.name
    bone = arm.edit_bones.new('Wrist.L')
    bone.head = 0.5288, -0.0125, 1.2312
    bone.tail = 0.5842, -0.0197, 1.2286
    bone.roll = -1.5240
    bone.use_connect = True
    bone.bbone_x = 0.0139
    bone.bbone_z = 0.0139
    bone.head_radius = 0.0132
    bone.tail_radius = 0.0056
    bone.envelope_distance = 0.0222
    bone.envelope_weight = 1.0000
    bone.use_envelope_multiply = 0.0000
    bone.parent = arm.edit_bones[bones['Forearm.L']]
    bones['Wrist.L'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['Shoulder.L']]
    pbone.rigify_type = 'cloud_shoulder'
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'

    try:
        pbone.rigify_parameters.CR_deform_segments = 1
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_sharp_sections = True
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_cap_control = False
    except AttributeError:
        pass
    pbone = obj.pose.bones[bones['UpperArm.L']]
    pbone.rigify_type = 'cloud_limbs'
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    try:
        pbone.rigify_parameters.CR_world_aligned_controls = False
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_double_first_control = False
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_double_ik_control = False
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_use_custom_category_name = False
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_use_custom_limb_name = False
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_cap_control = False
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.CR_center_all_fk = True
    except AttributeError:
        pass

    pbone = obj.pose.bones[bones['Forearm.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['Wrist.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        arm.edit_bones.active = bone

    return bones